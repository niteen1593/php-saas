#!/usr/bin/env php
<?php

// get arguments
$arguments = $argv;

$framework = $arguments[1] ?? '';

if (empty($framework)) {
    echo "Usage: php use <framework>\n";
    exit(1);
}

$feature = $arguments[2] ?? '';

if (empty($feature)) {
    echo "Usage: php use <framework> <react|vue|phpunit|pest|paddle|stripe>\n";
    exit(1);
}

$links = [];

if ($framework === 'laravel') {
    exec('php laravel/artisan migrate:reset');

    if ($feature === 'react') {
        $links['laravel/resources/js'] = 'react/src';
        $links['laravel/eslint.config.js'] = 'react/eslint.config.js';
        $links['laravel/package.json'] = 'react/package.json';
        $links['laravel/tsconfig.json'] = 'react/tsconfig.json';
        $links['laravel/vite.config.ts'] = 'react/vite.config.ts';
        $links['laravel/components.json'] = 'react/components.json';
    }

    if ($feature === 'vue') {
        $links['laravel/resources/js'] = 'vue/src';
        $links['laravel/eslint.config.js'] = 'vue/eslint.config.js';
        $links['laravel/package.json'] = 'vue/package.json';
        $links['laravel/tsconfig.json'] = 'vue/tsconfig.json';
        $links['laravel/vite.config.ts'] = 'vue/vite.config.ts';
        $links['laravel/components.json'] = 'vue/components.json';
    }

    if ($feature === 'phpunit') {
        $links['laravel/tests'] = 'laravel/tests-phpunit';
    }

    if ($feature === 'pest') {
        $links['laravel/tests'] = 'laravel/tests-pest';
    }

    $links['laravel/app/Models/User.php'] = 'laravel/app/Models/UserPaddle.php';

    if ($feature === 'paddle') {
        $links['laravel/app/Models/Subscription.php'] = 'laravel/app/Models/SubscriptionPaddle.php';
        $links['laravel/app/Http/Controllers/Billing'] = 'laravel/app/Http/Controllers/BillingPaddle';
        $links['laravel/routes/billing.php'] = 'laravel/routes/billing-paddle.php';
        $links['laravel/resources/views/billing'] = 'laravel/resources/views/billing-paddle';

        $envPath = __DIR__.'/laravel/.env';
        if (file_exists($envPath)) {
            $envContent = file_get_contents($envPath);
            $envContent = preg_replace('/^PHP_SAAS_BILLING=.*/m', 'PHP_SAAS_BILLING=paddle', $envContent);
            file_put_contents($envPath, $envContent);
        }
    }

    if ($feature === 'stripe') {
        $links['laravel/app/Models/User.php'] = 'laravel/app/Models/UserStripe.php';
        $links['laravel/app/Models/Subscription.php'] = 'laravel/app/Models/SubscriptionStripe.php';
        $links['laravel/app/Http/Controllers/Billing'] = 'laravel/app/Http/Controllers/BillingStripe';
        $links['laravel/routes/billing.php'] = 'laravel/routes/billing-stripe.php';
        $links['laravel/resources/views/billing'] = 'laravel/resources/views/billing-stripe';

        $envPath = __DIR__.'/laravel/.env';
        if (file_exists($envPath)) {
            $envContent = file_get_contents($envPath);
            $envContent = preg_replace('/^PHP_SAAS_BILLING=.*/m', 'PHP_SAAS_BILLING=stripe', $envContent);
            file_put_contents($envPath, $envContent);
        }
    }
}

foreach ($links as $link => $target) {
    $linkPath = __DIR__.'/'.$link;
    $targetPath = __DIR__.'/'.$target;

    // Delete existing linkPath (symlink, file, or directory)
    if (is_link($linkPath)) {
        unlink($linkPath);
    } elseif (is_file($linkPath)) {
        unlink($linkPath);
    } elseif (is_dir($linkPath)) {
        // Recursive delete
        $it = new RecursiveDirectoryIterator($linkPath, RecursiveDirectoryIterator::SKIP_DOTS);
        $files = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);
        foreach ($files as $file) {
            $file->isDir() ? rmdir($file) : unlink($file);
        }
        rmdir($linkPath);
    }

    // Create symlink
    if (! symlink($targetPath, $linkPath)) {
        echo "❌ Failed to link: $linkPath → $targetPath\n";
    }
}

exec('php laravel/artisan migrate:refresh --seed');
exec('php laravel/artisan optimize:clear');

echo "✅ Now using $framework with $feature.\n";

if (in_array($feature, ['react', 'vue'])) {
    echo "Installing dependencies...\n";

    exec('npm install --prefix='.__DIR__.'/laravel');
}
